package com.tilperion.base.service;

import ch.obermuhlner.math.big.BigDecimalMath;
import ch.obermuhlner.math.big.BigFloat;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.MathContext;

@Service
public class CalculatorChecker {

    private String PI = new StringBuffer("3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940" +
            "812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817" +
            "488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301" +
            "194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343" +
            "0146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049 9510597317328160963185950244594553469083026425223082533446850352" +
            "619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654" +
            "85863278865936153381827968230301952035301852968995773622599413891249721775 283479131515574857242454150695950829533116861727855889075098381754637464939319 25506040092770167113" +
            "9009848824012858361603563707660104710181942955596198946767 837449448255379774726847104047534646208046684259069491293313677028989152104752 162056966024058038150193511253382430" +
            "035587640247496473263914199272604269922796 782354781636009341721641219924586315030286182974555706749838505494588586926995 6909272107975093029553211653449872027559602364806654" +
            "99119881834797753566369807 426542527862551818417574672890977772793800081647060016145249192173217214772350 14144197356854816136115735255213347574184946843852332390739414333454" +
            "7762416862 518983569485562099219222184272550254256887671790494601653466804988627232791786 085784383827967976681454100953883786360950680064225125205117392984896084128488 62694" +
            "5604241965285022210661186306744278622039194945047123713786960956364371917 287467764657573962413890865832645995813390478027590099465764078951269468398352 595709825822620522489" +
            "407726719478268482601476990902640136394437455305068203496 252451749399651431429809190659250937221696461515709858387410597885959772975498 9301617539284681382686838689427741559" +
            "91855925245953959431049972524680845987273 644695848653836736222626099124608051243884390451244136549762780797715691435997 70012961608944169486855584840635342207222582848864815" +
            "8456028506016842739452267 467678895252138522549954666727823986456596116354886230577456498035593634568174 324112515076069479451096596094025228879710893145669136867228748940560" +
            "101503308 617928680920874760917824938589009714909675985261365549781893129784821682998948 722658804857564014270477555132379641451523746234364542858444795265867821051141 354735" +
            "739523113427166102135969536231442952484937187110145765403590279934403742 007310578539062198387447808478489683321445713868751943506430218453191048481005 3706146806749192781911" +
            "97939952061419663428754440643745123718192179998391015919 561814675142691239748940907186494231961567945208095146550225231603881930142093 76213785595663893778708303906979207734" +
            "6722182562599661501421503068038447734549 202605414665925201497442850732518666002132434088190710486331734649651453905796 268561005508106658796998163574736384052571459102897064" +
            "140110971206280439039759 515677157700420337869936007230558763176359421873125147120532928191826186125867 3215791984148488291644706095752706957220917567116722910981690915280173" +
            "50671274 858322287183520935396572512108357915136988209144421006751033467110314126711136 990865851639831501970165151168517143765761835155650884909989859982387345528331 6355076" +
            "47918535893226185489632132933089857064204675259070915481416549859461637 180270981994309924488957571282890592323326097299712084433573265489382391193259 74636673058360414281388" +
            "3032038249037589852437441702913276561809377344403070746 921120191302033038019762110110044929321516084244485963766983895228684783123552 658213144957685726243344189303968642624" +
            "341077322697802807318915441101044682325 271620105265227211166039666557309254711055785376346682065310989652691862056476 9312570586356620185581007293606598764861179104533488503" +
            "46113657686753249441668 039626579787718556084552965412665408530614344431858676975145661406800700237877 65913440171274947042056223053899456131407112700040785473326993908145466").toString().replace(" ", "");

    public boolean checkPiCalculation(int precision) {
        BigFloat.Context context = BigFloat.context(precision);
        BigFloat piFloatStandart = context.valueOf(PI);

        return false;
    }

    public boolean checkSinCosCalculation(int precision) {
        return false;
    }
 }
